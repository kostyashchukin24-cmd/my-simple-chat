import asyncio
import os
import bcrypt

import psycopg2
from psycopg2.extras import RealDictCursor

from pywebio import start_server
from pywebio.input import input, input_group, actions, PASSWORD, select
from pywebio.output import put_markdown, put_scrollable, put_error, put_buttons, toast, output
from pywebio.session import run_async, run_js

online_users = set()

def get_db():
    return psycopg2.connect(os.environ["DATABASE_URL"], sslmode="require")

def init_db():
    conn = get_db()
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS messages (
            id SERIAL PRIMARY KEY,
            username TEXT NOT NULL,
            text TEXT NOT NULL,
            recipient TEXT,
            created_at TIMESTAMPTZ DEFAULT NOW()
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            email TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            display_name TEXT NOT NULL
        )
    """)
    conn.commit()
    cur.close()
    conn.close()

def get_all_users():
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT display_name FROM users ORDER BY display_name")
    names = [row[0] for row in cur.fetchall()]
    cur.close()
    conn.close()
    return names

def hash_password(password: str) -> str:
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

def verify_password(password: str, hashed: str) -> bool:
    return bcrypt.checkpw(password.encode('utf-8'), hashed.encode('utf-8'))

def register_user(email: str, password: str, display_name: str) -> bool:
    conn = get_db()
    cur = conn.cursor()
    try:
        cur.execute(
            "INSERT INTO users (email, password_hash, display_name) VALUES (%s, %s, %s)",
            (email, hash_password(password), display_name)
        )
        conn.commit()
        return True
    except psycopg2.IntegrityError:
        conn.rollback()
        return False
    finally:
        cur.close()
        conn.close()

def authenticate_user(email: str, password: str):
    conn = get_db()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("SELECT id, email, password_hash, display_name FROM users WHERE email = %s", (email,))
    user = cur.fetchone()
    cur.close()
    conn.close()
    if user and verify_password(password, user['password_hash']):
        return dict(user)
    return None

def load_messages_for_user(my_name):
    conn = get_db()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("""
        SELECT username, text, recipient FROM messages
        WHERE created_at >= NOW() - INTERVAL '24 hours'
          AND (
            recipient IS NULL
            OR username = %s
            OR recipient = %s
          )
        ORDER BY created_at ASC
        LIMIT 200
    """, (my_name, my_name))
    rows = cur.fetchall()
    cur.close()
    conn.close()
    return rows

def save_message(sender, text, recipient=None):
    conn = get_db()
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO messages (username, text, recipient) VALUES (%s, %s, %s)",
        (sender, text, recipient)
    )
    conn.commit()
    cur.close()
    conn.close()

def clear_chat():
    conn = get_db()
    cur = conn.cursor()
    cur.execute("DELETE FROM messages")
    conn.commit()
    cur.close()
    conn.close()

init_db()

async def refresh_msgs(my_name, msg_box, last_time):
    while True:
        await asyncio.sleep(1)
        conn = get_db()
        cur = conn.cursor(cursor_factory=RealDictCursor)
        cur.execute("""
            SELECT username, text, recipient, created_at FROM messages
            WHERE created_at > %s
              AND (
                recipient IS NULL
                OR username = %s
                OR recipient = %s
              )
            ORDER BY created_at ASC
        """, (last_time, my_name, my_name))
        new = cur.fetchall()
        cur.close()
        conn.close()

        for msg in new:
            if msg["recipient"] is None:
                txt = f'üì¢ {msg["text"]}' if msg["username"] == 'üì¢' else f"`{msg['username']}`: {msg['text']}"
            elif msg["recipient"] == my_name:
                txt = f"üì© **–õ–° –æ—Ç `{msg['username']}`**: {msg['text']}"
            else:
                txt = f"üì§ **–õ–° ‚Üí `{msg['recipient']}`**: {msg['text']}"
            msg_box.append(put_markdown(txt))
            last_time = msg["created_at"]

async def confirm_and_clear(msg_box):
    confirmed = await actions("‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞", [
        "–î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë",
        "–û—Ç–º–µ–Ω–∞"
    ], help_text="–≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
    
    if confirmed == "–î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë":
        clear_chat()
        msg_box.clear()
        toast("‚úÖ –ß–∞—Ç –æ—á–∏—â–µ–Ω!", color='success')
        save_message('üì¢', '–ß–∞—Ç –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω.')
        msg_box.append(put_markdown('üì¢ –ß–∞—Ç –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω.'))

async def main():
    global online_users

    put_markdown("## üí¨ –ß–∞—Ç —Å –ª–∏—á–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")

    current_user = None
    while current_user is None:
        action = await actions("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", buttons=["–í–æ–π—Ç–∏", "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"])

        if action == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è":
            try:
                reg_data = await input_group("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", [
                    input("Email", name="email", required=True,
                          validate=lambda x: "Email –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å @" if "@" not in x else None),
                    input("–ü–∞—Ä–æ–ª—å", name="password", type=PASSWORD, required=True),
                    input("–í–∞—à–µ –∏–º—è –≤ —á–∞—Ç–µ", name="display_name", required=True, placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, –ê–Ω–Ω–∞")
                ])
                if register_user(reg_data['email'], reg_data['password'], reg_data['display_name']):
                    toast("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.")
                else:
                    toast("‚ùå Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!", color='error')
            except Exception as e:
                put_error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")

        elif action == "–í–æ–π—Ç–∏":
            try:
                login_data = await input_group("–í—Ö–æ–¥", [
                    input("Email", name="email", required=True,
                          validate=lambda x: "Email –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å @" if "@" not in x else None),
                    input("–ü–∞—Ä–æ–ª—å", name="password", type=PASSWORD, required=True)
                ])
                user = authenticate_user(login_data['email'], login_data['password'])
                if user:
                    current_user = user
                    toast(f"–ü—Ä–∏–≤–µ—Ç, {user['display_name']}!")
                else:
                    toast("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å!", color='error')
            except Exception as e:
                put_error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {str(e)}")

    display_name = current_user['display_name']
    online_users.add(display_name)

    msg_box = output()
    put_scrollable(msg_box, height=300, keep_bottom=True)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø—É–±–ª–∏—á–Ω—ã–µ + –ª–∏—á–Ω—ã–µ)
    for msg in load_messages_for_user(display_name):
        if msg["recipient"] is None:
            txt = f'üì¢ {msg["text"]}' if msg["username"] == 'üì¢' else f"`{msg['username']}`: {msg['text']}"
        elif msg["recipient"] == display_name:
            txt = f"üì© **–õ–° –æ—Ç `{msg['username']}`**: {msg['text']}"
        else:
            txt = f"üì§ **–õ–° ‚Üí `{msg['recipient']}`**: {msg['text']}"
        msg_box.append(put_markdown(txt))

    save_message('üì¢', f'`{display_name}` –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É!')
    msg_box.append(put_markdown(f'üì¢ `{display_name}` –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É'))

    # –ü–æ–ª—É—á–∞–µ–º last_time –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT MAX(created_at) FROM messages")
    last_time = cur.fetchone()[0] or '2020-01-01'
    cur.close()
    conn.close()

    refresh_task = run_async(refresh_msgs(display_name, msg_box, last_time))

    while True:
        data = await input_group("–°–æ–æ–±—â–µ–Ω–∏–µ", [
            input(name="msg", placeholder="–¢–µ–∫—Å—Ç..."),
            actions(name="cmd", buttons=[
                "–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
                {"label": "–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "value": "private"},
                {"label": "–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", "value": "clear", "color": "danger"},
                {"label": "–í—ã–π—Ç–∏", "type": "cancel"}
            ])
        ], validate=lambda d: ("msg", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç!") if d["cmd"] == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" and not d["msg"] else None)

        if data is None:
            break

        if data["cmd"] == "clear":
            await confirm_and_clear(msg_box)
            continue

        if data["cmd"] == "private":
            all_users = get_all_users()
            others = [u for u in all_users if u != display_name]
            if not others:
                toast("–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –õ–°.", color='warn')
                continue
            target = await select("–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°?", options=others)
            if target:
                save_message(display_name, data['msg'], recipient=target)
                msg_box.append(put_markdown(f"üì§ **–õ–° ‚Üí `{target}`**: {data['msg']}"))
            continue

        # –ü—É–±–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg_box.append(put_markdown(f"`{display_name}`: {data['msg']}"))
        save_message(display_name, data['msg'])

    refresh_task.close()
    online_users.discard(display_name)
    save_message('üì¢', f'`{display_name}` –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!')
    toast("–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞!")
    put_buttons(['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —á–∞—Ç'], onclick=lambda _: run_js('location.reload()'))

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    start_server(main, host='0.0.0.0', port=port, debug=False, cdn=False)
