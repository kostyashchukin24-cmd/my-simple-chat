import asyncio
import json
import os
from datetime import datetime, timedelta

from pywebio import start_server
from pywebio.input import *
from pywebio.output import *
from pywebio.session import run_async, run_js

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
CHAT_FILE = "chat_history.json"
MAX_MESSAGES_COUNT = 100
MAX_AGE_HOURS = 24

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
chat_msgs = []
online_users = set()


def load_messages():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞, —Ñ–∏–ª—å—Ç—Ä—É—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É"""
    if not os.path.exists(CHAT_FILE):
        return []
    try:
        with open(CHAT_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        now = datetime.now()
        filtered = []
        for msg in data:  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ "for msg in" –±–µ–∑ "data"
            try:
                ts = datetime.fromisoformat(msg["timestamp"])
                if (now - ts).total_seconds() < MAX_AGE_HOURS * 3600:
                    filtered.append((msg["user"], msg["text"]))
            except:
                continue
        return filtered[-MAX_MESSAGES_COUNT:]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return []


def save_messages(messages):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
    data = []
    for user, text in messages:
        data.append({
            "user": user,
            "text": text,
            "timestamp": datetime.now().isoformat()
        })
    try:
        with open(CHAT_FILE, 'w', encoding='utf-8') as f:
            json.dump(data[-MAX_MESSAGES_COUNT:], f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
chat_msgs = load_messages()


async def main():
    global chat_msgs

    put_markdown("## üßä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–Ω–ª–∞–π–Ω —á–∞—Ç!\n–°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ 24 —á–∞—Å–∞!")

    msg_box = output()
    put_scrollable(msg_box, height=300, keep_bottom=True)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for user, text in chat_msgs:
        if user == 'üì¢':
            msg_box.append(put_markdown(f'üì¢ {text}'))
        else:
            msg_box.append(put_markdown(f"`{user}`: {text}"))

    nickname = await input("–í–æ–π—Ç–∏ –≤ —á–∞—Ç", required=True, placeholder="–í–∞—à–µ –∏–º—è",
                           validate=lambda n: "–¢–∞–∫–æ–π –Ω–∏–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!" if n in online_users or n == 'üì¢' else None)
    online_users.add(nickname)

    # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –≤—Ö–æ–¥
    chat_msgs.append(('üì¢', f'`{nickname}` –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É!'))
    save_messages(chat_msgs)
    msg_box.append(put_markdown(f'üì¢ `{nickname}` –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É'))

    refresh_task = run_async(refresh_msg(nickname, msg_box))

    while True:
        data = await input_group("üí≠ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", [
            input(placeholder="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ...", name="msg"),
            actions(name="cmd", buttons=["–û—Ç–ø—Ä–∞–≤–∏—Ç—å", {'label': "–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞", 'type': 'cancel'}])
        ], validate=lambda m: ('msg', "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!") if m["cmd"] == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" and not m['msg'] else None)

        if data is None:
            break

        msg_box.append(put_markdown(f"`{nickname}`: {data['msg']}"))
        chat_msgs.append((nickname, data['msg']))
        save_messages(chat_msgs)

    refresh_task.close()

    online_users.remove(nickname)
    toast("–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞!")
    chat_msgs.append(('üì¢', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{nickname}` –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!'))
    save_messages(chat_msgs)
    msg_box.append(put_markdown(f'üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{nickname}` –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!'))

    put_buttons(['–ü–µ—Ä–µ–∑–∞–π—Ç–∏'], onclick=lambda btn: run_js('window.location.reload()'))


async def refresh_msg(nickname, msg_box):
    global chat_msgs
    last_idx = len(chat_msgs)

    while True:
        await asyncio.sleep(0.5)
        current_len = len(chat_msgs)
        if current_len > last_idx:
            for i in range(last_idx, current_len):
                user, text = chat_msgs[i]
                if user != nickname:
                    if user == 'üì¢':
                        msg_box.append(put_markdown(f'üì¢ {text}'))
                    else:
                        msg_box.append(put_markdown(f"`{user}`: {text}"))
            last_idx = current_len


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    start_server(main, host='0.0.0.0', port=port, debug=False, cdn=False)
