import asyncio
import os
import hashlib
import psycopg2
from psycopg2.extras import RealDictCursor
from pywebio import start_server
from pywebio.input import *
from pywebio.output import *
from pywebio.session import run_async, run_js, info

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ–Ω–ª–∞–π–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ –∏–º–µ–Ω–∏ –∏–∑ –ë–î)
online_users = set()

def get_db():
    return psycopg2.connect(os.environ["DATABASE_URL"], sslmode="require")

def init_db():
    conn = get_db()
    cur = conn.cursor()
    # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    cur.execute("""
        CREATE TABLE IF NOT EXISTS messages (
            id SERIAL PRIMARY KEY,
            username TEXT NOT NULL,
            text TEXT NOT NULL,
            created_at TIMESTAMPTZ DEFAULT NOW()
        )
    """)
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            username TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL
        )
    """)
    conn.commit()
    cur.close()
    conn.close()

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def register_user(username, password):
    conn = get_db()
    cur = conn.cursor()
    try:
        cur.execute("INSERT INTO users (username, password_hash) VALUES (%s, %s)",
                    (username, hash_password(password)))
        conn.commit()
        return True
    except psycopg2.IntegrityError:
        conn.rollback()
        return False  # –∏–º—è –∑–∞–Ω—è—Ç–æ
    finally:
        cur.close()
        conn.close()

def authenticate_user(username, password):
    conn = get_db()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("SELECT username, password_hash FROM users WHERE username = %s", (username,))
    user = cur.fetchone()
    cur.close()
    conn.close()
    if user and user["password_hash"] == hash_password(password):
        return True
    return False

def load_messages():
    conn = get_db()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("""
        SELECT username, text FROM messages
        WHERE created_at >= NOW() - INTERVAL '24 hours'
        ORDER BY created_at ASC
        LIMIT 100
    """)
    rows = cur.fetchall()
    cur.close()
    conn.close()
    return [(r["username"], r["text"]) for r in rows]

def save_message(user, text):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("INSERT INTO messages (username, text) VALUES (%s, %s)", (user, text))
    conn.commit()
    cur.close()
    conn.close()

async def refresh_msgs(my_name, msg_box):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT MAX(created_at) FROM messages")
    last_time = cur.fetchone()[0] or '2020-01-01'
    cur.close()
    conn.close()

    while True:
        await asyncio.sleep(1)
        conn = get_db()
        cur = conn.cursor(cursor_factory=RealDictCursor)
        cur.execute("""
            SELECT username, text, created_at FROM messages
            WHERE created_at > %s
            ORDER BY created_at ASC
        """, (last_time,))
        new = cur.fetchall()
        cur.close()
        conn.close()

        for msg in new:
            if msg["username"] != my_name:
                txt = f'üì¢ {msg["text"]}' if msg["username"] == 'üì¢' else f"`{msg['username']}`: {msg['text']}"
                msg_box.append(put_markdown(txt))
            last_time = msg["created_at"]

async def auth_flow():
    while True:
        action = await actions("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", buttons=['–í–æ–π—Ç–∏', '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'])
        if action == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è':
            data = await input_group("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", [
                input('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', name='username', required=True),
                input('–ü–∞—Ä–æ–ª—å', name='password', type=PASSWORD, required=True),
                input('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å', name='password2', type=PASSWORD, required=True)
            ], validate=lambda d: ('password2', '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!') if d['password'] != d['password2'] else None)

            if register_user(data['username'], data['password']):
                toast("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.")
            else:
                toast("–ò–º—è –∑–∞–Ω—è—Ç–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")

        elif action == '–í–æ–π—Ç–∏':
            data = await input_group("–í—Ö–æ–¥", [
                input('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', name='username', required=True),
                input('–ü–∞—Ä–æ–ª—å', name='password', type=PASSWORD, required=True)
            ])
            if authenticate_user(data['username'], data['password']):
                return data['username']
            else:
                toast("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å!")

async def main():
    global online_users

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
    init_db()

    put_markdown("## üí¨ –ó–∞—â–∏—â—ë–Ω–Ω—ã–π —á–∞—Ç (—Å–æ–æ–±—â–µ–Ω–∏—è —Ö—Ä–∞–Ω—è—Ç—Å—è 24 —á–∞—Å–∞)")

    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    nickname = await auth_flow()

    if nickname in online_users:
        toast("–í—ã —É–∂–µ –≤ —á–∞—Ç–µ –≤ –¥—Ä—É–≥–æ–π –≤–∫–ª–∞–¥–∫–µ!")
        await sleep(3)
        run_js('location.reload()')
        return

    online_users.add(nickname)

    msg_box = output()
    put_scrollable(msg_box, height=300, keep_bottom=True)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    for user, text in load_messages():
        if user == 'üì¢':
            msg_box.append(put_markdown(f'üì¢ {text}'))
        else:
            msg_box.append(put_markdown(f"`{user}`: {text}"))

    save_message('üì¢', f'`{nickname}` –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É!')
    msg_box.append(put_markdown(f'üì¢ `{nickname}` –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É'))

    refresh_task = run_async(refresh_msgs(nickname, msg_box))

    try:
        while True:
            data = await input_group("–°–æ–æ–±—â–µ–Ω–∏–µ", [
                input(name="msg", placeholder="–¢–µ–∫—Å—Ç..."),
                actions(name="cmd", buttons=["–û—Ç–ø—Ä–∞–≤–∏—Ç—å", {"label": "–í—ã–π—Ç–∏", "type": "cancel"}])
            ], validate=lambda d: ("msg", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç!") if d["cmd"] == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" and not d["msg"] else None)

            if data is None:
                break

            msg_box.append(put_markdown(f"`{nickname}`: {data['msg']}"))
            save_message(nickname, data['msg'])

    finally:
        refresh_task.close()
        online_users.discard(nickname)
        save_message('üì¢', f'`{nickname}` –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!')
        toast("–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞!")
        put_buttons(['–í–µ—Ä–Ω—É—Ç—å—Å—è'], onclick=lambda _: run_js('location.reload()'))

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    start_server(main, host='0.0.0.0', port=port, debug=False, cdn=False)
