import asyncio
import os
import psycopg2
from psycopg2.extras import RealDictCursor
from pywebio import start_server
from pywebio.input import *
from pywebio.output import *
from pywebio.session import run_async, run_js

online_users = set()

def get_db():
    return psycopg2.connect(os.environ["DATABASE_URL"], sslmode="require")

def init_db():
    conn = get_db()
    cur = conn.cursor()
    # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    cur.execute("""
        CREATE TABLE IF NOT EXISTS messages (
            id SERIAL PRIMARY KEY,
            username TEXT NOT NULL,
            text TEXT NOT NULL,
            created_at TIMESTAMPTZ DEFAULT NOW()
        )
    """)
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è
    cur.execute("""
        CREATE TABLE IF NOT EXISTS friend_requests (
            id SERIAL PRIMARY KEY,
            from_user TEXT NOT NULL,
            to_user TEXT NOT NULL,
            status TEXT NOT NULL DEFAULT 'pending',
            created_at TIMESTAMPTZ DEFAULT NOW(),
            UNIQUE (from_user, to_user)
        )
    """)
    conn.commit()
    cur.close()
    conn.close()

def load_messages():
    conn = get_db()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("""
        SELECT username, text FROM messages
        WHERE created_at >= NOW() - INTERVAL '24 hours'
        ORDER BY created_at ASC
        LIMIT 100
    """)
    rows = cur.fetchall()
    cur.close()
    conn.close()
    return [(r["username"], r["text"]) for r in rows]

def save_message(user, text):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("INSERT INTO messages (username, text) VALUES (%s, %s)", (user, text))
    conn.commit()
    cur.close()
    conn.close()

# --- –î—Ä—É–∑—å—è ---
def send_friend_request(from_user, to_user):
    if from_user == to_user:
        return False
    conn = get_db()
    cur = conn.cursor()
    try:
        cur.execute("""
            INSERT INTO friend_requests (from_user, to_user, status)
            VALUES (%s, %s, 'pending')
            ON CONFLICT (from_user, to_user) DO NOTHING
        """, (from_user, to_user))
        conn.commit()
        return True
    except Exception:
        conn.rollback()
        return False
    finally:
        cur.close()
        conn.close()

def get_pending_requests(to_user):
    conn = get_db()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("""
        SELECT from_user FROM friend_requests
        WHERE to_user = %s AND status = 'pending'
    """, (to_user,))
    rows = cur.fetchall()
    cur.close()
    conn.close()
    return [r["from_user"] for r in rows]

def accept_friend_request(from_user, to_user):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("""
        UPDATE friend_requests
        SET status = 'accepted'
        WHERE from_user = %s AND to_user = %s AND status = 'pending'
    """, (from_user, to_user))
    conn.commit()
    cur.close()
    conn.close()

def reject_friend_request(from_user, to_user):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("""
        UPDATE friend_requests
        SET status = 'rejected'
        WHERE from_user = %s AND to_user = %s AND status = 'pending'
    """, (from_user, to_user))
    conn.commit()
    cur.close()
    conn.close()

def get_friends(username):
    conn = get_db()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("""
        SELECT from_user FROM friend_requests
        WHERE to_user = %s AND status = 'accepted'
        UNION
        SELECT to_user FROM friend_requests
        WHERE from_user = %s AND status = 'accepted'
    """, (username, username))
    rows = cur.fetchall()
    cur.close()
    conn.close()
    return [r["from_user"] for r in rows]

# --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def refresh_msgs(my_name, msg_box):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT MAX(created_at) FROM messages")
    last_time = cur.fetchone()[0] or '2020-01-01'
    cur.close()
    conn.close()

    while True:
        await asyncio.sleep(1)
        conn = get_db()
        cur = conn.cursor(cursor_factory=RealDictCursor)
        cur.execute("""
            SELECT username, text, created_at FROM messages
            WHERE created_at > %s
            ORDER BY created_at ASC
        """, (last_time,))
        new = cur.fetchall()
        cur.close()
        conn.close()

        for msg in new:
            if msg["username"] != my_name:
                txt = f'üì¢ {msg["text"]}' if msg["username"] == 'üì¢' else f"`{msg['username']}`: {msg['text']}"
                msg_box.append(put_markdown(txt))
                last_time = msg["created_at"]

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    global online_users
    init_db()
    put_markdown("## üí¨ –ß–∞—Ç —Å –¥—Ä—É–∑—å—è–º–∏ (—Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî 24 —á)")
    msg_box = output()
    put_scrollable(msg_box, height=300, keep_bottom=True)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    for user, text in load_messages():
        if user == 'üì¢':
            msg_box.append(put_markdown(f'üì¢ {text}'))
        else:
            msg_box.append(put_markdown(f"`{user}`: {text}"))

    nickname = await input("–í–∞—à–µ –∏–º—è", required=True, placeholder="–ò–º—è",
                           validate=lambda n: "–ò–º—è –∑–∞–Ω—è—Ç–æ!" if n in online_users or n == 'üì¢' else None)
    online_users.add(nickname)

    save_message('üì¢', f'`{nickname}` –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É!')
    msg_box.append(put_markdown(f'üì¢ `{nickname}` –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É'))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–∑—å—è
    pending = get_pending_requests(nickname)
    for req in pending:
        msg_box.append(put_markdown(f'üì¨ –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç `{req}`'))
        put_buttons([
            {'label': f'‚úÖ –ü—Ä–∏–Ω—è—Ç—å {req}', 'value': f'accept_{req}', 'color': 'success'},
            {'label': f'‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {req}', 'value': f'reject_{req}', 'color': 'danger'}
        ], onclick=[
            lambda u=req: accept_friend_request(u, nickname),
            lambda u=req: reject_friend_request(u, nickname)
        ])

    refresh_task = run_async(refresh_msgs(nickname, msg_box))

    try:
        while True:
            data = await input_group("–°–æ–æ–±—â–µ–Ω–∏–µ", [
                input(name="msg", placeholder="–¢–µ–∫—Å—Ç... (/add –∏–º—è ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è)"),
                actions(name="cmd", buttons=["–û—Ç–ø—Ä–∞–≤–∏—Ç—å", {"label": "–í—ã–π—Ç–∏", "type": "cancel"}])
            ], validate=lambda d: ("msg", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç!") if d["cmd"] == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" and not d["msg"] else None)

            if data is None:
                break

            msg_text = data['msg']

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add
            if msg_text.startswith('/add '):
                target = msg_text[5:].strip()
                if not target:
                    toast("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ—Å–ª–µ /add")
                elif target == nickname:
                    toast("–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è!")
                elif target == 'üì¢':
                    toast("–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É!")
                else:
                    if send_friend_request(nickname, target):
                        toast(f"–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `{target}`")
                    else:
                        toast("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞)")
                continue  # –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ

            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg_box.append(put_markdown(f"`{nickname}`: {msg_text}"))
            save_message(nickname, msg_text)

    finally:
        refresh_task.close()
        online_users.discard(nickname)
        save_message('üì¢', f'`{nickname}` –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!')
        toast("–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞!")
        put_buttons(['–í–µ—Ä–Ω—É—Ç—å—Å—è'], onclick=lambda _: run_js('location.reload()'))

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    start_server(main, host='0.0.0.0', port=port, debug=False, cdn=False)
