import asyncio
import os
import bcrypt

import psycopg2
from psycopg2.extras import RealDictCursor

from pywebio import start_server
from pywebio.input import input, input_group, actions, PASSWORD, select
from pywebio.output import put_markdown, put_scrollable, put_error, put_buttons, toast, output, clear, put_text
from pywebio.session import run_async, run_js

online_users = set()

def get_db():
    return psycopg2.connect(os.environ["DATABASE_URL"], sslmode="require")

def init_db():
    conn = get_db()
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS messages (
            id SERIAL PRIMARY KEY,
            username TEXT NOT NULL,
            text TEXT NOT NULL,
            recipient TEXT,
            created_at TIMESTAMPTZ DEFAULT NOW()
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            email TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            display_name TEXT NOT NULL
        )
    """)
    conn.commit()
    cur.close()
    conn.close()

def get_all_users():
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT display_name FROM users ORDER BY display_name")
    names = [row[0] for row in cur.fetchall()]
    cur.close()
    conn.close()
    return names

def get_private_partners(my_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –µ—Å—Ç—å –õ–° (–∑–∞ 24—á)"""
    conn = get_db()
    cur = conn.cursor()
    cur.execute("""
        SELECT DISTINCT username FROM messages
        WHERE recipient = %s AND created_at >= NOW() - INTERVAL '24 hours'
        UNION
        SELECT DISTINCT recipient FROM messages
        WHERE username = %s AND recipient IS NOT NULL AND created_at >= NOW() - INTERVAL '24 hours'
    """, (my_name, my_name))
    partners = [row[0] for row in cur.fetchall() if row[0] != my_name]
    cur.close()
    conn.close()
    return sorted(partners)

def hash_password(password: str) -> str:
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

def verify_password(password: str, hashed: str) -> bool:
    return bcrypt.checkpw(password.encode('utf-8'), hashed.encode('utf-8'))

def register_user(email: str, password: str, display_name: str) -> bool:
    conn = get_db()
    cur = conn.cursor()
    try:
        cur.execute(
            "INSERT INTO users (email, password_hash, display_name) VALUES (%s, %s, %s)",
            (email, hash_password(password), display_name)
        )
        conn.commit()
        return True
    except psycopg2.IntegrityError:
        conn.rollback()
        return False
    finally:
        cur.close()
        conn.close()

def authenticate_user(email: str, password: str):
    conn = get_db()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("SELECT id, email, password_hash, display_name FROM users WHERE email = %s", (email,))
    user = cur.fetchone()
    cur.close()
    conn.close()
    if user and verify_password(password, user['password_hash']):
        return dict(user)
    return None

def load_public_messages():
    conn = get_db()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("""
        SELECT username, text FROM messages
        WHERE recipient IS NULL AND created_at >= NOW() - INTERVAL '24 hours'
        ORDER BY created_at ASC
        LIMIT 100
    """)
    rows = cur.fetchall()
    cur.close()
    conn.close()
    return [(r["username"], r["text"]) for r in rows]

def load_private_messages(my_name, partner):
    conn = get_db()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("""
        SELECT username, text, created_at FROM messages
        WHERE created_at >= NOW() - INTERVAL '24 hours'
          AND (
            (username = %s AND recipient = %s)
            OR (username = %s AND recipient = %s)
          )
        ORDER BY created_at ASC
    """, (my_name, partner, partner, my_name))
    rows = cur.fetchall()
    cur.close()
    conn.close()
    return rows

def save_message(sender, text, recipient=None):
    conn = get_db()
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO messages (username, text, recipient) VALUES (%s, %s, %s)",
        (sender, text, recipient)
    )
    conn.commit()
    cur.close()
    conn.close()

def clear_chat():
    conn = get_db()
    cur = conn.cursor()
    cur.execute("DELETE FROM messages WHERE recipient IS NULL")
    conn.commit()
    cur.close()
    conn.close()

init_db()

# --- –û–±—â–∏–π —á–∞—Ç ---
async def show_public_chat(display_name, msg_box):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    for user, text in load_public_messages():
        if user == 'üì¢':
            msg_box.append(put_markdown(f'üì¢ {text}'))
        else:
            msg_box.append(put_markdown(f"`{user}`: {text}"))

    save_message('üì¢', f'`{display_name}` –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –æ–±—â–µ–º—É —á–∞—Ç—É!')
    msg_box.append(put_markdown(f'üì¢ `{display_name}` –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –æ–±—â–µ–º—É —á–∞—Ç—É!'))

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    async def refresh():
        conn = get_db()
        cur = conn.cursor()
        cur.execute("SELECT MAX(created_at) FROM messages WHERE recipient IS NULL")
        last_time = cur.fetchone()[0] or '2020-01-01'
        cur.close()
        conn.close()

        while True:
            await asyncio.sleep(1)
            conn = get_db()
            cur = conn.cursor(cursor_factory=RealDictCursor)
            cur.execute("""
                SELECT username, text FROM messages
                WHERE recipient IS NULL AND created_at > %s
                ORDER BY created_at ASC
            """, (last_time,))
            new = cur.fetchall()
            cur.close()
            conn.close()

            for msg in new:
                if msg["username"] != display_name:
                    txt = f'üì¢ {msg["text"]}' if msg["username"] == 'üì¢' else f"`{msg['username']}`: {msg['text']}"
                    msg_box.append(put_markdown(txt))
                    last_time = msg["created_at"]

    return run_async(refresh())

# --- –õ–∏—á–Ω—ã–µ —á–∞—Ç—ã ---
async def show_private_chats(display_name):
    while True:
        clear()  # –û—á–∏—â–∞–µ–º –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        put_markdown("## üí¨ –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        partners = get_private_partners(display_name)
        all_users = [u for u in get_all_users() if u != display_name]
        
        options = []
        if partners:
            put_text("–í–∞—à–∏ –¥–∏–∞–ª–æ–≥–∏:")
            for p in partners:
                options.append({"label": f"üí¨ {p}", "value": p})
            put_buttons(options, onclick=lambda p: asyncio.create_task(open_private_chat(display_name, p)))
            put_text("")
        
        if all_users:
            put_buttons([{"label": "‚ûï –ù–æ–≤—ã–π —á–∞—Ç", "value": "new", "color": "primary"}],
                        onclick=lambda _: asyncio.create_task(start_new_private_chat(display_name, all_users)))
        
        put_buttons([{"label": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–±—â–µ–º—É —á–∞—Ç—É", "value": "back"}],
                    onclick=lambda _: asyncio.create_task(main_chat_interface(display_name)))
        
        # –ñ–¥—ë–º, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –Ω–∞–∂–º—ë—Ç (–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —É—Ö–æ–¥–∏–º –≤ open_private_chat)
        await asyncio.sleep(3600)  # –ø—Ä–æ—Å—Ç–æ —É–¥–µ—Ä–∂–∏–≤–∞–µ–º —ç–∫—Ä–∞–Ω

async def start_new_private_chat(display_name, all_users):
    target = await select("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è", options=all_users)
    if target:
        await open_private_chat(display_name, target)

async def open_private_chat(display_name, partner):
    clear()
    put_markdown(f"## üí¨ –õ–∏—á–Ω—ã–π —á–∞—Ç —Å `{partner}`")
    msg_box = output()
    put_scrollable(msg_box, height=300, keep_bottom=True)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    for msg in load_private_messages(display_name, partner):
        if msg["username"] == display_name:
            msg_box.append(put_markdown(f"**–í—ã**: {msg['text']}"))
        else:
            msg_box.append(put_markdown(f"`{msg['username']}`: {msg['text']}"))

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ–µ ‚Äî –±–µ–∑ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –Ω–µ —É—Å–ª–æ–∂–Ω—è—Ç—å)
    while True:
        data = await input_group(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {partner}", [
            input(name="msg", placeholder="–¢–µ–∫—Å—Ç..."),
            actions(name="cmd", buttons=[
                "–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
                {"label": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "type": "cancel"}
            ])
        ], validate=lambda d: ("msg", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç!") if d["cmd"] == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" and not d["msg"] else None)

        if data is None:
            return await show_private_chats(display_name)

        save_message(display_name, data['msg'], recipient=partner)
        msg_box.append(put_markdown(f"**–í—ã**: {data['msg']}"))

# --- –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
async def main_chat_interface(display_name):
    clear()
    put_markdown("## üí¨ –û–±—â–∏–π —á–∞—Ç")
    msg_box = output()
    put_scrollable(msg_box, height=300, keep_bottom=True)

    refresh_task = await show_public_chat(display_name, msg_box)

    while True:
        data = await input_group("–°–æ–æ–±—â–µ–Ω–∏–µ", [
            input(name="msg", placeholder="–¢–µ–∫—Å—Ç..."),
            actions(name="cmd", buttons=[
                "–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
                {"label": "–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", "value": "clear", "color": "danger"},
                {"label": "–õ–∏—á–Ω—ã–µ —á–∞—Ç—ã", "value": "private"},
                {"label": "–í—ã–π—Ç–∏", "type": "cancel"}
            ])
        ], validate=lambda d: ("msg", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç!") if d["cmd"] == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" and not d["msg"] else None)

        if data is None:
            break

        if data["cmd"] == "clear":
            clear_chat()
            msg_box.clear()
            toast("‚úÖ –û–±—â–∏–π —á–∞—Ç –æ—á–∏—â–µ–Ω!")
            save_message('üì¢', '–û–±—â–∏–π —á–∞—Ç –±—ã–ª –æ—á–∏—â–µ–Ω.')
            msg_box.append(put_markdown('üì¢ –û–±—â–∏–π —á–∞—Ç –±—ã–ª –æ—á–∏—â–µ–Ω.'))
            continue

        if data["cmd"] == "private":
            return await show_private_chats(display_name)

        msg_box.append(put_markdown(f"`{display_name}`: {data['msg']}"))
        save_message(display_name, data['msg'])

    refresh_task.close()
    save_message('üì¢', f'`{display_name}` –ø–æ–∫–∏–Ω—É–ª –æ–±—â–∏–π —á–∞—Ç!')
    toast("–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞!")
    put_buttons(['–í–µ—Ä–Ω—É—Ç—å—Å—è'], onclick=lambda _: run_js('location.reload()'))

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞ ---
async def main():
    global online_users

    put_markdown("## üí¨ –ß–∞—Ç —Å –ª–∏—á–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")

    current_user = None
    while current_user is None:
        action = await actions("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", buttons=["–í–æ–π—Ç–∏", "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"])

        if action == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è":
            try:
                reg_data = await input_group("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", [
                    input("Email", name="email", required=True,
                          validate=lambda x: "Email –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å @" if "@" not in x else None),
                    input("–ü–∞—Ä–æ–ª—å", name="password", type=PASSWORD, required=True),
                    input("–í–∞—à–µ –∏–º—è –≤ —á–∞—Ç–µ", name="display_name", required=True)
                ])
                if register_user(reg_data['email'], reg_data['password'], reg_data['display_name']):
                    toast("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.")
                else:
                    toast("‚ùå Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!", color='error')
            except Exception as e:
                put_error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")

        elif action == "–í–æ–π—Ç–∏":
            try:
                login_data = await input_group("–í—Ö–æ–¥", [
                    input("Email", name="email", required=True,
                          validate=lambda x: "Email –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å @" if "@" not in x else None),
                    input("–ü–∞—Ä–æ–ª—å", name="password", type=PASSWORD, required=True)
                ])
                user = authenticate_user(login_data['email'], login_data['password'])
                if user:
                    current_user = user
                    online_users.add(user['display_name'])
                    return await main_chat_interface(user['display_name'])
                else:
                    toast("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å!", color='error')
            except Exception as e:
                put_error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {str(e)}")

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    start_server(main, host='0.0.0.0', port=port, debug=False, cdn=False)
