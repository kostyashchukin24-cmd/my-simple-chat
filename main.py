import asyncio
import os
import psycopg2
from psycopg2.extras import RealDictCursor
from pywebio import start_server
from pywebio.input import *
from pywebio.output import *
from pywebio.session import run_async, run_js

online_users = set()

def get_db():
    return psycopg2.connect(os.environ["DATABASE_URL"], sslmode="require")

def init_db():
    conn = get_db()
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS messages (
            id SERIAL PRIMARY KEY,
            username TEXT NOT NULL,
            text TEXT NOT NULL,
            created_at TIMESTAMPTZ DEFAULT NOW()
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS friend_requests (
            id SERIAL PRIMARY KEY,
            from_user TEXT NOT NULL,
            to_user TEXT NOT NULL,
            created_at TIMESTAMPTZ DEFAULT NOW(),
            UNIQUE (from_user, to_user)
        )
    """)
    conn.commit()
    cur.close()
    conn.close()

def load_messages():
    conn = get_db()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("""
        SELECT username, text FROM messages
        WHERE created_at >= NOW() - INTERVAL '24 hours'
        ORDER BY created_at ASC
        LIMIT 100
    """)
    rows = cur.fetchall()
    cur.close()
    conn.close()
    return [(r["username"], r["text"]) for r in rows]

def save_message(user, text):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("INSERT INTO messages (username, text) VALUES (%s, %s)", (user, text))
    conn.commit()
    cur.close()
    conn.close()

# --- –î–†–£–ó–¨–Ø ---
def add_friend(user, friend):
    if user == friend or friend == 'üì¢':
        return False
    conn = get_db()
    cur = conn.cursor()
    try:
        cur.execute("""
            INSERT INTO friend_requests (from_user, to_user)
            VALUES (%s, %s)
            ON CONFLICT DO NOTHING
        """, (user, friend))
        conn.commit()
        return True
    except Exception:
        return False
    finally:
        cur.close()
        conn.close()

def get_friends(user):
    conn = get_db()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("""
        SELECT to_user FROM friend_requests WHERE from_user = %s
        UNION
        SELECT from_user FROM friend_requests WHERE to_user = %s
    """, (user, user))
    rows = cur.fetchall()
    cur.close()
    conn.close()
    return sorted({r["to_user"] for r in rows})

async def show_friends_popup(nickname):
    friends = get_friends(nickname)
    content = [put_markdown("## üë• –ú–æ–∏ –¥—Ä—É–∑—å—è")]
    if friends:
        content.append(put_table([[f] for f in friends], header=["–ò–º—è"]))
    else:
        content.append(put_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."))

    content.append(put_text(""))
    content.append(put_text("–î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è:"))
    try:
        target = await input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è", required=False)
        if target and target != nickname and target != 'üì¢':
            if add_friend(nickname, target):
                toast(f"‚úÖ {target} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è!")
            else:
                toast("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å.")
    except Exception:
        pass  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
init_db()

async def refresh_msgs(my_name, msg_box):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT MAX(created_at) FROM messages")
    last_time = cur.fetchone()[0] or '2020-01-01'
    cur.close()
    conn.close()
    while True:
        await asyncio.sleep(1)
        conn = get_db()
        cur = conn.cursor(cursor_factory=RealDictCursor)
        cur.execute("""
            SELECT username, text, created_at FROM messages
            WHERE created_at > %s
            ORDER BY created_at ASC
        """, (last_time,))
        new = cur.fetchall()
        cur.close()
        conn.close()
        for msg in new:
            if msg["username"] != my_name:
                txt = f'üì¢ {msg["text"]}' if msg["username"] == 'üì¢' else f"`{msg['username']}`: {msg['text']}"
                msg_box.append(put_markdown(txt))
                last_time = msg["created_at"]

async def main():
    global online_users
    put_markdown("## üí¨ –ß–∞—Ç (—Å–æ–æ–±—â–µ–Ω–∏—è —Ö—Ä–∞–Ω—è—Ç—Å—è 24 —á–∞—Å–∞)")
    msg_box = output()
    put_scrollable(msg_box, height=300, keep_bottom=True)

    for user, text in load_messages():
        if user == 'üì¢':
            msg_box.append(put_markdown(f'üì¢ {text}'))
        else:
            msg_box.append(put_markdown(f"`{user}`: {text}"))

    nickname = await input("–í–∞—à–µ –∏–º—è", required=True, placeholder="–ò–º—è",
                           validate=lambda n: "–ò–º—è –∑–∞–Ω—è—Ç–æ!" if n in online_users or n == 'üì¢' else None)
    online_users.add(nickname)

    save_message('üì¢', f'`{nickname}` –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É!')
    msg_box.append(put_markdown(f'üì¢ `{nickname}` –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É'))

    refresh_task = run_async(refresh_msgs(nickname, msg_box))

    while True:
        data = await input_group("–°–æ–æ–±—â–µ–Ω–∏–µ", [
            input(name="msg", placeholder="–¢–µ–∫—Å—Ç..."),
            actions(name="cmd", buttons=[
                "–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
                {"label": "üë• –î—Ä—É–∑—å—è", "value": "friends", "type": "submit"},
                {"label": "–í—ã–π—Ç–∏", "type": "cancel"}
            ])
        ], validate=lambda d: ("msg", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç!") if d["cmd"] == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" and not d["msg"] else None)

        if data is None:
            break

        if data["cmd"] == "friends":
            await show_friends_popup(nickname)
            continue

        msg_box.append(put_markdown(f"`{nickname}`: {data['msg']}"))
        save_message(nickname, data['msg'])

    refresh_task.close()
    online_users.discard(nickname)
    save_message('üì¢', f'`{nickname}` –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!')
    toast("–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞!")
    put_buttons(['–í–µ—Ä–Ω—É—Ç—å—Å—è'], onclick=lambda _: run_js('location.reload()'))

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    start_server(main, host='0.0.0.0', port=port, debug=False, cdn=False)
